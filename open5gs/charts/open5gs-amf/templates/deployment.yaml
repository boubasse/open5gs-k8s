{{- with .Values.amf }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "open5gs-amf.fullname" $ }}
  labels:
    {{- include "open5gs-amf.labels" $ | nindent 4 }}
spec:
  {{- if not .autoscaling.enabled }}
  replicas: {{ .replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "open5gs-amf.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      annotations:
        k8s.v1.cni.cncf.io/networks: '[
            { "name": "{{ $.Values.global.n2network.name }}-{{ include "open5gs-amf.fullname" $ }}",
              "interface": "n2",
              "ips": [ "{{ $.Values.global.amf.n2ip }}/{{ $.Values.global.n2network.cidr }}" ]
            }]'
      labels:
        {{- include "open5gs-amf.labels" $ | nindent 8 }}
    spec:
      imagePullSecrets:
        {{- toYaml .imagePullSecrets | nindent 8 }}
      securityContext:
        {{- toYaml .podSecurityContext | nindent 8 }}
      
      initcontainers:
      - name: wait-scp
        {{- with $.Values.global.initcontainers.curl }}
        image: {{ .registry }}/{{ .image }}:{{ .tag }}
        {{- end }}
        env:
        - name: URIS
          value: http://{{ $.Values.global.scp.service.name }}:{{ $.Values.global.scp.service.port }}
        command: ['sh', '-c', 'set -x; for uri in $URIS; do while [ $(curl --insecure --connect-timeout 1 -s -o /dev/null -w "%{http_code}" $uri) -ne 200 ]; do echo waiting for scp; sleep 1; done; done;']
      containers:
      - name: {{ .name }}
        securityContext:
          {{- toYaml .securityContext | nindent 12 }}
        image: "{{ .image.name }}:{{ .image.tag | default $.Chart.AppVersion }}"
        imagePullPolicy: {{ .image.pullPolicy }}
        ports:
        - name: amf-sbi
          containerPort: {{ .service.port }}
        - name: ngap
          containerPort: {{ $.Values.global.amf.n2port }}
          protocol: TCP
        resources:
          {{- toYaml .resources | nindent 12 }}
        volumeMounts:
        - mountPath: {{ .volumeMounts.mountPath }}
          name: {{ include "open5gs-amf.fullname" $ }}-volume
        command: ["./open5gs-amfd"]
        args: ["-c", "../etc/amf.yaml"] 
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      nodeSelector:
        {{- toYaml .nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .affinity | nindent 8 }}
      tolerations:
        {{- toYaml .tolerations | nindent 8 }}

      volumes:
      - name: {{ include "open5gs-amf.fullname" $ }}-volume
        projected:
          sources:
          - configMap:
              name: {{ include "open5gs-amf.fullname" $ }}-configmap
{{- end }}