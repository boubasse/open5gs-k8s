{{- with .Values.udm }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "open5gs-udm.fullname" $ }}
  labels:
    {{- include "open5gs-udm.labels" $ | nindent 4 }}
spec:
  {{- if not .autoscaling.enabled }}
  replicas: {{ .replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "open5gs-udm.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      annotations:
        k8s.v1.cni.cncf.io/networks: '[
              { "name": "{{ $.Values.global.sbinetwork.name }}",
                "interface": "sbi",
                "ips": [ "{{ .sbinet.ip }}/{{ $.Values.global.sbinetwork.cidr }}" ]
              }]'
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") $ | sha256sum }}
      labels:
        {{- include "open5gs-udm.labels" $ | nindent 8 }}
    spec:
      imagePullSecrets:
        {{- toYaml .imagePullSecrets | nindent 8 }}
      securityContext:
        {{- toYaml .podSecurityContext | nindent 8 }}
      
      initContainers:
      - name: wait-amf
        {{- with $.Values.global.initcontainers.curl }}
        image: {{ .registry }}/{{ .image }}:{{ .tag }}
        {{- end }}
        imagePullPolicy: {{ .image.pullPolicy }}
        env:
        - name: URIS
          value: http://{{ $.Values.global.amf.sbinet.ip }}:{{ $.Values.global.amf.sbinet.port }}
        command: ['sh', '-c', 'set -x; for uri in $URIS; do while [ $(curl --insecure --connect-timeout 1 -s -o /dev/null -w "%{http_code}" $uri --http2-prior-knowledge) -ne 400 ]; do echo waiting for scp; sleep 1; done; done;']
      containers:
      - name: {{ .name }}
        securityContext:
          {{- toYaml .securityContext | nindent 12 }}
        image: "{{ .image.registry }}/{{ .image.name }}:{{ .image.tag | default $.Chart.AppVersion }}"
        imagePullPolicy: {{ .image.pullPolicy }}
        ports:
        - name: udm-sbi
          containerPort: {{ .sbinet.port }}
        resources:
          {{- toYaml .resources | nindent 12 }}
        {{- if .livenessProbe.enabled }}
        livenessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: udm-sbi
            initialDelaySeconds: {{ .livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .livenessProbe.timeoutSeconds }}
            successThreshold: {{ .livenessProbe.successThreshold }}
            failureThreshold: {{ .livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .readinessProbe.enabled }}
        readinessProbe:
        # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
          tcpSocket:
            port: udm-sbi
          initialDelaySeconds: {{ .readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .readinessProbe.timeoutSeconds }}
          successThreshold: {{ .readinessProbe.successThreshold }}
          failureThreshold: {{ .readinessProbe.failureThreshold }}
        {{- end }}
        volumeMounts:
        - mountPath: {{ .volumeMounts.confPath }}
          name: {{ include "open5gs-udm.fullname" $ }}-conf-volume
        - mountPath: {{ .volumeMounts.logPath }}
          name: {{ include "open5gs-udm.fullname" $ }}-log-volume
        command: ["./open5gs-udmd"]
        args: ["-c", "../etc/udm.yaml"]
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      nodeSelector:
        {{- toYaml .nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .affinity | nindent 8 }}
      tolerations:
        {{- toYaml .tolerations | nindent 8 }}

      volumes:
      - name: {{ include "open5gs-udm.fullname" $ }}-log-volume
        emptyDir: {}
      - name: {{ include "open5gs-udm.fullname" $ }}-conf-volume
        projected:
          sources:
          - configMap:
              name: {{ include "open5gs-udm.fullname" $ }}-configmap
{{- end }}
